C51 COMPILER V9.60.0.0   SPI                                                               06/14/2022 10:30:47 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE SPI
OBJECT MODULE PLACED IN .\Objects\spi.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE user\src\spi.c OPTIMIZE(0,SPEED) BROWSE INCDIR(.\include;.\user\inc) DEB
                    -UG OBJECTEXTEND PRINT(.\Listings\spi.lst) OBJECT(.\Objects\spi.obj)

line level    source

   1          #include "spi.h"
   2          
   3          void spi_delay(u8 n) //11us
   4          {
   5   1           while(n--);
   6   1      }
   7          
   8          void Init_Spi(void)
   9          {
  10   1          // 使能SPI
  11   1          SPI_Enable();
  12   1              // 设置MASTER
  13   1              SPI_SelectMASTERByMSTRbit();
  14   1              // 设置SPI时钟
  15   1              SPI_SetClock(SPI_CLK_SYSCLK_4);
  16   1              // 设置SPICLK初始电平 CPOL=0 低电平
  17   1              SPI_SetCPOL_0();        
  18   1              // 设置数据传送位序 MSB 高位在前
  19   1              SPI_SetDataMSB();
  20   1              // 设置采样和改变数据模式 CPHA=0 前沿采样,后沿改变数据
  21   1              SPI_SetCPHA_0();
  22   1              // 设置IO nSS/P14,MOSI/P15,MISO/P16,SPICLK/P17
  23   1              SPI_SetUseP14P15P16P17();
  24   1      }
  25          
  26          
  27          /***********************************************************************************
  28          函数名称:   u8 SPI1_SendRecv_Data(u8 ToSend)
  29          功能描述:   SPI主机模式收发数据
  30          输入参数:   u8 SPI_DATA: 待发送的数据
  31          返回参数:   u8 :收到的数据  
  32          *************************************************************************************/
  33          u8 SPI1_SendRecv_Data(u8 SPI_DATA)
  34          {
  35   1          while(SPSTAT & THRF);
  36   1              SPI_SendData(SPI_DATA);                                                 // SPI 发送数据
  37   1              while(SPI_ChkCompleteFlag()==0);                                // 等待SPI传送完成
  38   1              SPI_ClearCompleteFlag();                                                // SPI 清完成标志
  39   1              return SPI_GetData();                                                   // 返回接收到的数据
  40   1      }
  41          
  42          
  43          void ML7345_Write_Reg(u8 addr,u8 dat)
  44          {
  45   1          spi_delay(1);
  46   1          SPI1_CS_L;
  47   1          spi_delay(1);
  48   1      
  49   1          addr = (addr << 1) | 0x01;
  50   1          SPI1_SendRecv_Data(addr);
  51   1          SPI1_SendRecv_Data(dat);
  52   1      
  53   1          spi_delay(1);
  54   1          SPI1_CS_H;
C51 COMPILER V9.60.0.0   SPI                                                               06/14/2022 10:30:47 PAGE 2   

  55   1          spi_delay(1);
  56   1      }
  57          
  58          u8 ML7345_Read_Reg(u8 addr)
  59          {
  60   1          xdata u8 read = 0;
  61   1          spi_delay(1);
  62   1          SPI1_CS_L;
  63   1          spi_delay(1);
  64   1      
  65   1          addr = addr << 1;
  66   1          SPI1_SendRecv_Data(addr);       /* 写地址 */
  67   1          read = SPI1_SendRecv_Data(0xFF);/* 读数据 */
  68   1      
  69   1          spi_delay(1);
  70   1          SPI1_CS_H;
  71   1          spi_delay(1);
  72   1      
  73   1          return read;
  74   1      }
  75          
  76          void ML7345_Write_Fifo(u8 addr,u8 *pbuf,u8 len)
  77          {
  78   1          xdata u8 i = 0;
  79   1          spi_delay(1);
  80   1          SPI1_CS_L;
  81   1          spi_delay(1);
  82   1      
  83   1          addr = (addr << 1) | 0x01;
  84   1          SPI1_SendRecv_Data(addr);
  85   1          SPI1_SendRecv_Data(pbuf[0]);
  86   1          for(i=1; i<len; i++)
  87   1          {
  88   2              spi_delay(2);
  89   2              SPI1_SendRecv_Data(pbuf[i]);
  90   2          }
  91   1      
  92   1          spi_delay(1);
  93   1          SPI1_CS_H;
  94   1          spi_delay(1);
  95   1      }
  96          /*
  97          void ML7345_Read_Fifo(u8 addr,u8 *pbuf,u8 len)
  98          {
  99              xdata u8 i = 0;
 100              spi_delay(1);
 101              SPI1_CS_L;
 102              spi_delay(1);
 103          
 104              addr = addr << 1;
 105              SPI1_SendRecv_Data(addr);
 106          
 107              for(i=0; i<len; i++)
 108              {
 109                  pbuf[i] = SPI1_SendRecv_Data(0xFF);
 110              }
 111          
 112              spi_delay(1);
 113              SPI1_CS_H;
 114              spi_delay(1);
 115          }*/
 116          //////////////////////////////////////////////////////////////////////////////////////////////
C51 COMPILER V9.60.0.0   SPI                                                               06/14/2022 10:30:47 PAGE 3   

 117          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    288    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      2    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     10    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
