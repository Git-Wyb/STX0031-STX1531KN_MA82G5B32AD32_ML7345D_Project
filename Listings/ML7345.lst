C51 COMPILER V9.60.0.0   ML7345                                                            04/11/2022 14:25:25 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE ML7345
OBJECT MODULE PLACED IN .\Objects\ML7345.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE user\src\ML7345.c OPTIMIZE(0,SPEED) BROWSE INCDIR(.\include;.\user\inc) 
                    -DEBUG OBJECTEXTEND PRINT(.\Listings\ML7345.lst) OBJECT(.\Objects\ML7345.obj)

line level    source

   1          #include "ML7345.h"
   2          
   3          //#include <stdlib.h>
   4          //#include <stdbool.h> /* For true/false definition                      */
   5          //#include <stdio.h>
   6          #include "spi.h"
   7          #include "gpio.h"
   8          #include "ram.h"
   9          #include "ID_Decode.h"
  10          #include "Type.h"
  11          #include "uart.h"
  12          xdata u8 *txbuf = NULL;
  13          //ROHM demo板 main fre=426.25;Vco Cal Range:425.85 - 431.85.MHz
  14          //TCXO = 24M
  15          xdata u8 Fre_426_075[8] = {0x23,0x08,0x19,0x99,0x23,0x07,0x91,0x11}; //426.075MHz频率设置
  16          xdata u8 Fre_429_350[8] = {0x23,0x0C,0x77,0x77,0x23,0x0B,0xEE,0xEF}; //429.350MHz频率设置
  17          xdata u8 Fre_429_550[8] = {0x23,0x0C,0xBB,0xBC,0x23,0x0C,0x33,0x33}; //429.550MHz频率设置
  18          xdata u8 Fre_426_750[8] = {0x23,0x09,0x00,0x00,0x23,0x08,0x77,0x77}; //426.750MHz频率设置
  19          xdata u8 Fre_429_175[8] = {0x23,0x0c,0x3b,0xbc,0x23,0x0b,0xb3,0x33}; //429.175MHz频率设置
  20          
  21          /**Receiver_vent**/ xdata u8 Receiver_vent_Cache = 0;
  22          xdata u32 SPI_Receive_DataForC[7]; //C郿
  23          xdata u8 SPI_RECEIVE_BUFF[40] = {0};
  24          
  25          /************Address: 0x20000500, Name: GENERIC_PKT_FRAME_CFG1***************************************/
  26          
  27          xdata u8 Radio_Date_Type = 1;
  28          xdata u8 tx_pack_cnt = 0;
  29          xdata u8 Radio_Date_Type_bak=1;
  30          xdata u8 APP_TX_freq=0;
  31          
  32          xdata u8 TX_Scan_step=0;
  33          xdata u8 First_TX_Scan=0;
  34          xdata u8 rf_offset = 0;
  35          
  36          xdata u8 Freq_SetBuff[8] = {0};
  37          /*
  38          Function: RF Init
  39          Parameter: Null
  40          Return: Null
  41          */
  42          /* Initialize: 426MHz General Packet(TCXO_ChStep=12.5kHz_DR=1.2kbps_Dev=0.6kHz_GFSK)
  43             发射功率0dBm */
  44          void RF_ML7345_Init(u8* freq,u8 sync,u8 rx_len)
  45          {
  46   1          SpiGpio_Init();
  47   1          ML7345_RESETN_SET();    /* Hardware Reset */
  48   1          while(1){
  49   2              if(ML7345_Read_Reg(0x0Du)&0x01u){   /* Wait Clock stabilization completion */
  50   3                  break;
  51   3              }
  52   2          }
  53   1          ML7345_Write_Reg(0x00,0x11);    /* Bank0 Set */
  54   1          ML7345_Write_Reg(0x01,0xff);    /* Software Reset */
C51 COMPILER V9.60.0.0   ML7345                                                            04/11/2022 14:25:25 PAGE 2   

  55   1          ML7345_Write_Reg(0x02,0x9f);    /* Clk Enable */
  56   1          ML7345_Write_Reg(0x03,0xc3);    /* TCXO_EN */
  57   1          ML7345_Write_Reg(0x04,0x03);    /* MSB first,Format D (non Wireless M-Bus, general purpose format) */
  58   1          ML7345_Write_Reg(0x05,0x10);    /* CRC Disable,Length field 1-byte mode */
  59   1          ML7345_Write_Reg(0x06,0x00);    /* Data Rate: 0x00 1.2kbps; 0x22 4.8kbps */
  60   1          ML7345_Write_Reg(0x07,0x15);    /* GFSK,NRZ */
  61   1          ML7345_Write_Reg(0x08,0x00);    /* Sync word pattern 1,Manchester Do not inverse polarity */
  62   1          ML7345_Write_Reg(0x09,0x00);    /* CH 0 */
  63   1          ML7345_Write_Reg(0x0a,0x18);    /* AUTO_TX_EN */
  64   1          ML7345_Write_Reg(0x0b,0x88);    /* TRX_OFF */
  65   1          ML7345_Write_Reg(0x0c,0x00);    /* FIFO mode */
  66   1          ML7345_Write_Reg(0x0d,0x08);    /* [INT_SOURCE_GRP1],Interrupt status for INT0 to INT7 */
  67   1          ML7345_Write_Reg(0x0e,0x00);    /* [INT_SOURCE_GRP2],Interrupt status for INT8 to INT15 (RX) */
  68   1          ML7345_Write_Reg(0x0f,0x00);    /* [INT_SOURCE_GRP3],Interrupt status for INT16 to INT23 (TX) */
  69   1          ML7345_Write_Reg(0x10,0x00);    /* masking interrupt,[INT_EN_GRP1]Interupt mask for INT0 to INT7 */
  70   1          ML7345_Write_Reg(0x11,0x00);    /* masking interrupt,[INT_EN_GRP2]Interupt mask for INT8 to INT15 */
  71   1          ML7345_Write_Reg(0x12,0x00);    /* masking interrupt,[INT_EN_GRP3]Interupt mask for INT16 to INT23 */
  72   1          ML7345_Write_Reg(0x13,0x00);    /* [CRC_ERR_H]CRC error status (high byte) */
  73   1          ML7345_Write_Reg(0x14,0x00);    /* [CRC_ERR_M]CRC error status (middle byte)*/
  74   1          ML7345_Write_Reg(0x15,0x00);    /* [CRC_ERR_L]CRC error status (low byte)*/
  75   1          ML7345_Write_Reg(0x16,0x00);    /* State clear control */
  76   1          ML7345_Write_Reg(0x17,0x00);    /* TX FIFO-Full level setting */
  77   1          ML7345_Write_Reg(0x18,0x00);    /* TX FIFO-Empty level setting and TX trigger level setting in FAST_TX
             - mode */
  78   1          ML7345_Write_Reg(0x19,0x00);    /* RX FIFO-Full level disable and level setting */
  79   1          ML7345_Write_Reg(0x1a,0x00);    /* RX FIFO-Empty level disable and level setting (high byte) */
  80   1      
  81   1          ML7345_Write_Reg(0x2d,0x06);    /* SLEEP execution and Wake-up operation setting */
  82   1          /* Preamble */
  83   1          ML7345_Write_Reg(0x3f,0x05);    /* Preamble pattern setting,p198*/
  84   1      
  85   1          ML7345_Write_Reg(0x41,0x8B);    /* Enable ED value calculation,bit3=0 ED value constantly updated,bit3
             -=1 ED value acquired at SyncWord detection timing*/
  86   1      
  87   1          ML7345_Write_Reg(0x42,0x00);    //TX前导码长度高八位
  88   1          ML7345_Write_Reg(0x43,0x30);    //TX前导码长度低八位,不等少于16个位,TX preamble length =
             - (specified value x2) bits
  89   1          //----------------------------------------------------------------------------------------------------
             --
  90   1          ML7345_Write_Reg(0x45,0x08);    //接收前导码长度(bit) RX preamble setting and ED threshold chec
             -k setting
  91   1          //----------------------------------------------------------------------------------------------------
             --
  92   1          ML7345_Write_Reg(0x4e,0x00);    /* GPIO0 [output] “L” level */
  93   1          ML7345_Write_Reg(0x4f,0x00);    /* GPIO1 [output] “L” level,Upon reset,disable GPIO1 pin is CLK_OU
             -T function */
  94   1          ML7345_Write_Reg(0x50,0x00);    /* GPIO2 [output] “L” level */
  95   1          ML7345_Write_Reg(0x51,0x00);    /* GPIO3 [output] “L” level */
  96   1      
  97   1          ML7345_Write_Reg(0x54,0x14);    /* Channel filter bandwidth setting */
  98   1      
  99   1          ML7345_Write_Reg(0x60,0x06); /* Decimation gain setting 提高灵敏度 */
 100   1      
 101   1          ML7345_Write_Reg(0x63,0x88);    /* Fine adjustment of load capacitance for oscillation circuits */
 102   1      
 103   1          ML7345_Write_Reg(0x67,0x00);    /* 功率设置0dbm */
 104   1          ML7345_Write_Reg(0x68,0x00);    /* PA regulator fine adjustment */
 105   1          ML7345_Write_Reg(0x69,0x00);    /* PA gain adjustment */
 106   1      
 107   1          ML7345_Write_Reg(0x6e,0x5b);    /*5b VCO calibration setting or status indication */
 108   1      
 109   1          ML7345_Write_Reg(0x7a,0x00);    //发送包长度高八位
C51 COMPILER V9.60.0.0   ML7345                                                            04/11/2022 14:25:25 PAGE 3   

 110   1          ML7345_Write_Reg(0x7b,0x0c);    //发送包长度低八位
 111   1      
 112   1          ML7345_Write_Reg(0x7d,0x00);    //接收包长度高八位
 113   1          ML7345_Write_Reg(0x7e,rx_len);    //接收包长度低八位
 114   1      
 115   1          /***************************************************************************************************/
 116   1      
 117   1          ML7345_Write_Reg(0x00,0x22);    /* Bank1 Set */
 118   1          ML7345_Write_Reg(0x02,0x07);    /* TX data rate conversion setting (high 4bits) */
 119   1          ML7345_Write_Reg(0x03,0xd0);    /* TX data rate conversion setting (low byte) */
 120   1          ML7345_Write_Reg(0x04,0x00);    /* RX data rate concversion setting 1 (high 4bits) */
 121   1          ML7345_Write_Reg(0x05,0x50);    /* RX data rate cnvesrion setting 1 (low byte) */
 122   1      
 123   1          ML7345_Write_Reg(0x11,0x27);    /* RSSI offset value setting during low gain operation */
 124   1      
 125   1          ML7345_Write_Reg(0x13,0x0c);    /* Scale factor setting for ED value conversion */
 126   1      
 127   1          ML7345_Write_Reg(0x1a,0x02);    /* Divide 2,PLL frequency division setting */
 128   1          /* 426.075MHz */
 129   1          ML7345_Write_Reg(0x1b,freq[0]);    /* TX frequency setting (I counter),p67-69 */
 130   1          ML7345_Write_Reg(0x1c,freq[1]);    /* TX frequency setting (F counter high 4bit) */
 131   1          ML7345_Write_Reg(0x1d,freq[2]);    /* TX frequency setting (F counter middle byte) */
 132   1          ML7345_Write_Reg(0x1e,freq[3]);    /* TX frequency setting (F counter low byte) */
 133   1          ML7345_Write_Reg(0x1f,freq[0]);    /* RX frequency setting (I counter) */
 134   1          ML7345_Write_Reg(0x20,freq[1]);    /* RX frequency setting (F counter high 4bit)  */
 135   1          ML7345_Write_Reg(0x21,freq[2]);    /* RX frequency setting (F counter middle byte) */
 136   1          ML7345_Write_Reg(0x22,freq[3]);    /* RX frequency setting (F counter low byte) */
 137   1      
 138   1          ML7345_Write_Reg(0x23,0x08);    /* 25KHz,Channel space setting (high byte) */
 139   1          ML7345_Write_Reg(0x24,0x88);    /* Channel space setting (low byte) */
 140   1          /* SyncWord 0x00005515 */
 141   1          ML7345_Write_Reg(0x25,0x10);    /* SyncWord length setting */
 142   1          ML7345_Write_Reg(0x26,0x0f);    /* SyncWord enable setting */
 143   1          ML7345_Write_Reg(0x27,0x00);    /* SyncWord #1 setting (bit24 to 31) */
 144   1          ML7345_Write_Reg(0x28,0x00);    /* SyncWord #1 setting (bit16 to 23) */
 145   1      #if (BUNKA_STX == 1)
                  ML7345_Write_Reg(0x29,0x55);    /* SyncWord #1 setting (bit8 to 15) */
                  ML7345_Write_Reg(0x2a,sync);    /* SyncWord #1 setting (bit0 to 7) */
              #else
 149   1          ML7345_Write_Reg(0x29,0x54);    /* SyncWord #1 setting (bit8 to 15) */
 150   1          ML7345_Write_Reg(0x2a,0x56);    /* SyncWord #1 setting (bit0 to 7) */
 151   1      #endif
 152   1          ML7345_Write_Reg(0x2f,0x08);    /* GFSK clock setting x8 clock,GFSK/FSK modulation timing resolution s
             -etting */
 153   1          ML7345_Write_Reg(0x30,0x00);    /* GFSK frequency deviation setting (high 6bits) */
 154   1          
 155   1          //GFSK frequency deviation: 0xAE=2.0kHz; 0xC0=2.2kHz
 156   1          ML7345_Write_Reg(0x31,0xC0);    /* P71  GFSK frequency deviation:2.2KHz,GFSK frequency deviation setti
             -ng (low byte) */
 157   1      
 158   1          /*(Channel#0 frequency-400khz)426.075:0x23 0x07 0x91 0x11;
 159   1          426.25:0x23 0x07 0xcc 0xcc */
 160   1          ML7345_Write_Reg(0x4d,freq[4]);    /* VCO calibration low limit frequency setting (I counter),p254 */
 161   1          ML7345_Write_Reg(0x4e,freq[5]);    /* VCO calibration low limit frequency setting (F counter high 4bit
             -s) */
 162   1          ML7345_Write_Reg(0x4f,freq[6]);    /* VCO calibration low limit frequency setting (F counter middle by
             -te) */
 163   1          ML7345_Write_Reg(0x50,freq[7]);    /* VCO calibration low limit frequency setting (F counter low byte)
             - */
 164   1          ML7345_Write_Reg(0x51,0x04);    /* 6 MHz,VCO calibration upper limit frequency setting */
 165   1          ML7345_Write_Reg(0x52,0x5a);    /* VCO calibration low limit value indication and setting */
 166   1          ML7345_Write_Reg(0x53,0x66);    /* VCO calibration upper limit value indication and setting */
C51 COMPILER V9.60.0.0   ML7345                                                            04/11/2022 14:25:25 PAGE 4   

 167   1      
 168   1          ML7345_Write_Reg(0x5c,0x15);    /* 0x10 Demodulator configulation 6 */
 169   1          ML7345_Write_Reg(0x5d,0x1b);    /* 0x1b Demodulator configulation 7 */
 170   1          ML7345_Write_Reg(0x5e,0x05);    /* 0x05 Demodulator configuration 8 */
 171   1          ML7345_Write_Reg(0x5f,0x67);    /* 0x67 Demodulator configulation 9 */
 172   1          ML7345_Write_Reg(0x60,0x0c);    /* Demodulator configulation 10 */
 173   1      
 174   1          SetReg_Rssi();  //2021.11.17 ROHM提出必要设置,否则读取RSSI偏差大。
 175   1      
 176   1          ML7345_Write_Reg(0x00,0x44); //bank2
 177   1          ML7345_Write_Reg(0x2a,0x0f); //2019.11.25 ROHM提出设置,设置之后灵敏度提升了2dBm
 178   1      
 179   1          /* 以下寄存器值为发送功率必要设置，不然发送功率偏差大 */
 180   1          ML7345_Write_Reg(0x00,0x44); //bank2
 181   1          ML7345_Write_Reg(0x4f,0x00);
 182   1      
 183   1          ML7345_Write_Reg(0x00,0x88); //bank3
 184   1          ML7345_Write_Reg(0x2f,0x3f);
 185   1          ML7345_Write_Reg(0x0c,0x41);
 186   1          ML7345_Write_Reg(0x0d,0x33);
 187   1          ML7345_Write_Reg(0x0e,0x54);
 188   1          ML7345_Write_Reg(0x14,0x10);
 189   1          ML7345_Write_Reg(0x24,0x03);
 190   1          ML7345_Write_Reg(0x7e,0x00);
 191   1      
 192   1          if((PROFILE_CH_FREQ_32bit_200002EC == 429350000) || (PROFILE_CH_FREQ_32bit_200002EC == 429550000)) ML7
             -345_DataRate_Set_4_8k();
 193   1          else    ML7345_DataRate_Set_1_2k();
 194   1          /*****************************************************/
 195   1      
 196   1          ML7345_Write_Reg(0x00, 0x11);     /* BANK_SEL(BANK0) */
 197   1          ML7345_Write_Reg(0x6f, 0x01);     /* VCO_CAL_START(CAL start) */
 198   1          while(1){
 199   2              if(ML7345_Read_Reg(0x0Du)&0x02u){   /* Wait VCO calibration completion */
 200   3                  break;
 201   3              }
 202   2          }
 203   1          ML7345_AllStateFlag_Clear(); //清除所有标志
 204   1          ML7345_GPIO0TxDoneInt_Enable();
 205   1      }
*** WARNING C280 IN LINE 44 OF user\src\ML7345.c: 'sync': unreferenced local variable
 206          /*
 207          void ML7345_MeasurBER_Init(void)
 208          {
 209              ML7345_Write_Reg(ADDR_BANK_SEL,BANK1_SEL);
 210              ML7345_Write_Reg(0x0e,0x00);
 211          
 212              ML7345_Write_Reg(ADDR_BANK_SEL,BANK3_SEL);
 213              ML7345_Write_Reg(0x0d,0x33);
 214          
 215              ML7345_Write_Reg(ADDR_BANK_SEL,BANK0_SEL);
 216              ML7345_Write_Reg(0x0c,0x40); //50   // DIO_SET, continuous output mode,DCLK is constantly output,no OU
             -TPUT (NOT stop output)
 217              ML7345_Write_Reg(0x4d,0x80); //80
 218          
 219              ML7345_Write_Reg(0x4E,0x05);    //ML7345D GPIO0 DCLK
 220              ML7345_Write_Reg(0x51,0x04);    //ML7345D GPIO3 DIO
 221          }*/
 222          
 223          
 224          void Tx_Data_Test(u8 mode)
 225          {
C51 COMPILER V9.60.0.0   ML7345                                                            04/11/2022 14:25:25 PAGE 5   

 226   1          ML7345_Write_Reg(0x00, 0x11);     /* BANK_SEL(BANK0) */
 227   1          switch(mode)
 228   1          {
 229   2              /* 发送：载波 */
 230   2              case 0: ML7345_Write_Reg(ADDR_RF_TEST_MODE,0x21);break;
 231   2      
 232   2              /* 发送：0101 */
 233   2              case 1:ML7345_Write_Reg(ADDR_RF_TEST_MODE,0x11);break;
 234   2      
 235   2              /* 发送：0 */
 236   2              case 2:ML7345_Write_Reg(ADDR_RF_TEST_MODE,0x09);break;
 237   2      
 238   2              /* 发送：1 */
 239   2              case 3: ML7345_Write_Reg(ADDR_RF_TEST_MODE,0x05);break;
 240   2      
 241   2               /* 发送：随机 */
 242   2              default:
 243   2                  ML7345_Write_Reg(ADDR_RF_TEST_MODE,0x03);
 244   2               break;
 245   2          }
 246   1          ML7345_SetAndGet_State(TX_ON);
 247   1      }
 248          
 249          
 250          void ML7345_TRX_Del(void)
 251          {
 252   1          idata u8 reg = 0;
 253   1          
 254   1          reg = ML7345_Read_Reg(ADDR_INT_SOURCE_GRP3);
 255   1          if(((reg & 0x01) == 0x01) && (reg != 0xff))
 256   1          {
 257   2              Flag_TxDone = 1;
 258   2              ML7345_StateFlag_Clear(TX_DONE_FLAG);
 259   2              if(FLAG_APP_TX == 1)
 260   2              {
 261   3                  if(txphase_Repeat < 3 && Flag_TxDone == 1)
 262   3                  {
 263   4                      Flag_TxDone = 0;
 264   4                      ML7345_AutoTx_Data(m_RFNormalBuf,txphase_end);
 265   4                      txphase_Repeat++;
 266   4                  }
 267   3                  else if(txphase_Repeat == 3 && Flag_TxDone == 1)
 268   3                  {
 269   4                      Flag_TxDone = 0;
 270   4                      FLAG_APP_TX = 0;
 271   4                      if(FG_d_StopKey == 0)   PIN_TX_LED = 0;
 272   4                      ML7345_SetAndGet_State(Force_TRX_OFF);
 273   4                      ML7345_RESETN = 0;
 274   4                      SpiGpio_UnInit();
 275   4                      ML7345D_POWER = FG_NOT_allow_out;
 276   4                  }
 277   3              }
 278   2          }
 279   1      }
 280          
 281          void dd_set_ML7345D_Power_on(void)
 282          {
 283   1          if(ML7345D_POWER == FG_NOT_allow_out)
 284   1              {
 285   2                      ML7345D_POWER = FG_allow_out;  
 286   2              delay_ms(2);
 287   2              //RF_ML7345_Init(Fre_426_075,0x15,12);
C51 COMPILER V9.60.0.0   ML7345                                                            04/11/2022 14:25:25 PAGE 6   

 288   2              }
 289   1      }
 290          /*
 291          void dd_set_ML7345D_Power_on_Init(void)
 292          {
 293              if(ML7345D_POWER == FG_NOT_allow_out)
 294                  {
 295                          ML7345D_POWER = FG_allow_out;  
 296                  delay_ms(2);
 297                  RF_ML7345_Init(Fre_426_075,0x15,12);
 298                  }
 299          }*/
 300          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1329    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    127    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6    ----
   IDATA SIZE       =      1    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
